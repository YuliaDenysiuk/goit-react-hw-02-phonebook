{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["INITIAL_STATE","name","number","ContactForm","state","handlerChange","target","value","setState","handleSubmit","e","preventDefault","props","onSubmit","reset","this","type","pattern","title","required","onChange","Component","ContactList","contacts","map","id","Filter","handlerFilterChange","App","filter","formSubmitHandler","contact","uuidv4","some","el","alert","getFilteredContacts","normalizedFilter","toLowerCase","includes","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGMA,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IAGJC,E,4MACJC,M,eAAaJ,G,EAEbK,cAAgB,YAAiB,IAAdC,EAAa,EAAbA,OACTL,EAAgBK,EAAhBL,KAAMM,EAAUD,EAAVC,MACd,EAAKC,SAAL,eAAiBP,EAAOM,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKC,MAAMC,SAAS,EAAKT,OACzB,EAAKU,S,EAGPA,MAAQ,WACN,EAAKN,SAAL,eAAmBR,K,4CAGrB,WACE,MAAyBe,KAAKX,MAAtBH,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACNG,EAAgCU,KAAhCV,cAAeI,EAAiBM,KAAjBN,aAEvB,OACE,uBAAMI,SAAUJ,EAAhB,UACE,yCAEE,uBACEO,KAAK,OACLf,KAAK,OACLM,MAAON,EACPgB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUf,OAGd,2CAEE,uBACEW,KAAK,MACLf,KAAK,SACLM,MAAOL,EACPe,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUf,OAGd,wBAAQW,KAAK,SAAb,gC,GAhDkBK,aA6DXlB,IC3CAmB,MAvBf,YAAoC,IAAbC,EAAY,EAAZA,SACrB,OACE,6BACGA,EAASC,KAAI,gBAAGC,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,+BACGD,EADH,KACWC,EACT,wBAAQc,KAAK,SAAb,sBAFOS,SCgBFC,MApBf,YAAiD,IAA/BnB,EAA8B,EAA9BA,MAAOoB,EAAuB,EAAvBA,oBACvB,OACE,qCACE,sDACA,uBACEX,KAAK,OACLT,MAAOA,EACPU,QAAQ,yHACRC,MAAM,kcACNE,SAAUO,QCLZC,E,4MACJxB,MAAQ,CACNmB,SAAU,CACR,CAAEE,GAAI,OAAQxB,KAAM,gBAAiBC,OAAQ,aAC7C,CAACuB,GAAI,OAAQxB,KAAM,iBAAkBC,OAAQ,aAC7C,CAACuB,GAAI,OAAQxB,KAAM,gBAAiBC,OAAQ,aAC5C,CAAEuB,GAAI,OAAQxB,KAAM,iBAAkBC,OAAQ,cAEhD2B,OAAQ,I,EAGVC,kBAAoB,YAAuB,IAApB7B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACnBqB,EAAa,EAAKnB,MAAlBmB,SAEFQ,EAAU,CACdN,GAAIO,cACJ/B,OACAC,UAGF,GAAIqB,EAASU,MAAK,SAAAC,GAAE,OAAKA,EAAGjC,OAAS8B,EAAQ9B,QAC3C,OAAOkC,MAAM,GAAD,OAAIlC,EAAJ,4BAGd,EAAKO,UAAS,gBAAGe,EAAH,EAAGA,SAAH,MAAmB,CAAEA,SAAS,CAAEQ,GAAH,mBAAeR,S,EAG5DI,oBAAsB,YAAiB,IAC7BpB,EAD4B,EAAbD,OACfC,MACR,EAAKC,SAAS,CAAEqB,OAAQtB,K,EAG1B6B,oBAAsB,WACpB,MAA6B,EAAKhC,MAA1BmB,EAAR,EAAQA,SACFc,EADN,EAAkBR,OACcS,cAChC,OAAOf,EAASM,QAAO,SAAAE,GAAO,OAAIA,EAAQ9B,KAAKqC,cAAcC,SAASF,O,4CAGxE,WACE,IAAQR,EAAWd,KAAKX,MAAhByB,OACAC,EAAgEf,KAAhEe,kBAAmBH,EAA6CZ,KAA7CY,oBACrBa,GAAmBJ,EAD+CrB,KAAxBqB,uBAGhD,OACE,gCACA,2CACA,cAAC,EAAD,CAAavB,SAAWiB,IAExB,0CACE,cAAC,EAAD,CAAQvB,MAAOsB,EAAQF,oBAAqBA,IAC9C,cAAC,EAAD,CAAaJ,SAAWiB,W,GAlDZnB,aAwDHO,IC1Dfa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.410f1164.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nclass ContactForm extends Component {\n  state = { ...INITIAL_STATE };\n\n  handlerChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const { handlerChange, handleSubmit } = this;\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handlerChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handlerChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  target: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ContactList({ contacts }) {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button type=\"button\">Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Filter({ value, handlerFilterChange }) {\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        onChange={handlerFilterChange}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  handlerFilterChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import './App.css';\nimport { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: ''\n  }\n\n  formSubmitHandler = ({ name, number }) => {\n    const { contacts } = this.state;\n\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    if (contacts.some(el => (el.name === contact.name))) {\n      return alert(`${name} is already in contacts`)\n    };\n\n    this.setState(({ contacts }) => ({ contacts: [contact, ...contacts] }));\n  }\n\n  handlerFilterChange = ({ target }) => {\n    const { value } = target;\n    this.setState({ filter: value });\n  }\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  }\n  \n  render() {\n    const { filter } = this.state;\n    const { formSubmitHandler, handlerFilterChange, getFilteredContacts } = this;\n    const filteredContacts = getFilteredContacts();\n\n    return (\n      <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={ formSubmitHandler } />      \n\n      <h2>Contacts</h2>\n        <Filter value={filter} handlerFilterChange={handlerFilterChange}/>\n      <ContactList contacts={ filteredContacts }/>      \n      </div>\n    )\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}